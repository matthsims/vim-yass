*yass.txt* Scroll prettier.

Author: Matt Simmons
License: MIT license

===============================================================================
Scrolling                                                                *yass*

yass#scroll({distance}, {with_cursor=0}, {override=0})            *yass#scroll*
  {distance} is the distance to scroll. By default, it will add to the current
  distance to travel.
  {with_cursor} is whether or not to move the cursor with the scroll.
  {override} is whether or not to zero out all values before beginning the
  scroll.

===============================================================================
Default mappings                                                *yass-mappings*

Definitions:
     <C-d> ->  <Plug>YassDown      :call yass#scroll(&scroll, 1)<CR>
     <C-u> ->  <Plug>YassUp        :call yass#scroll(-&scroll, 1)<CR>
     <C-f> ->  <Plug>YassPageDown  :call yass#scroll(&scroll * 2, 0)<CR>
     <C-b> ->  <Plug>YassPageUp    :call yass#scroll(-&scroll * 2, 0)<CR>
     z<CR> ->  <Plug>Yass_zCR     ^:<C-u>call yass#scroll(winline() - &scrolloff, 0, 1)<CR>
     zt    ->  <Plug>Yass_zt       :<C-u>call yass#scroll(winline() - &scrolloff - 1, 0, 1)<CR>
     z.    ->  <Plug>Yass_z.      ^:<C-u>call yass#scroll(winline() - winheight(0)/2, 0, 1)<CR>
     zz    ->  <Plug>Yass_zz       :<C-u>call yass#scroll(winline() - winheight(0)/2, 0, 1)<CR>
     z-    ->  <Plug>Yass_z-      ^:<C-u>call yass#scroll(winline() - winheight(0) + &scrolloff, 0, 1)<CR>
     zb    ->  <Plug>Yass_zb       :<C-u>call yass#scroll(winline() - winheight(0) + &scrolloff, 0, 1)<CR>
     <C-e> ->  <Plug>YassC-e       :<C-u>call yass#scroll(v:count1, 0)<CR>
     <C-y> ->  <Plug>YassC-y       :<C-u>call yass#scroll(- v:count1, 0)<CR>

Mappings:
Define *g:yass_nobind* to disable bindings, if you wish to use your own.

===============================================================================
Speed calculation                                                  *yass-speed*

*g:Yass_speed*
A |Funcref| (note the capital Y) that returns the current speed, given the
distance needed to scroll and the previous speed. One or both parameters may
be ignored, but the function is called with those so they must be accepted.
By default (first) and some additonal examples:
  let g:Yass#speed = {y -> 55 + 2*y + 50*tanh((y-10)/5)}
  let g:Yass#speed = {y -> y <= 30 ? 16 * exp(y/12) : 300}
  let g:Yass#speed = {y -> y * 16}
  let g:Yass#speed = {y -> 20}

  Note |lambda| expressions can be used for neovim, but are not required:
  function StepwiseSpeed(y)
    if a:y > 50
      return 400
    elseif a:y > 40
      return 300
    elseif a:y > 20
      return 150
    elseif a:y > 5
      return 50
    endif
    return 15
  endfunction
  let g:Yass#speed = function("StepwiseSpeed")

It should return a positive value interpreted as lines/second. If the value is
below |g:yass_minimum|, then |g:yass_minimum| will be used for the calculations.

*g:yass_minimum*
Minimum value for speed. Must be above 0. If |g:Yass_speed

*g:yass_interval*
The number of miliseconds to wait before checking to see if a scroll tick
should be done. If this is set to a high value, the plugin will scroll
multiple ticks at once to accomodate. 60 fps -> 1000/60 = 16.666
Default 16

